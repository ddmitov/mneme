#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use feature ':5.10';
use open ':std', ':encoding(UTF-8)';

# CORE MODULES:
use Encode;
use File::Spec::Functions qw(catdir);

# CPAN MODULES:
use JSON::PP;
use Mojolicious::Lite;

# CUSTOM APPLICATION PATHS:
my $resources_folder = catdir($ENV{PWD}, 'resources');
my $app_folder = catdir($resources_folder, 'app');
my $data_folder = catdir($resources_folder, 'data');

# Static files path:
unshift @{app->static->paths}, $app_folder;

# GET JSON DATA FROM EXTERNAL FILE:
my $file = catdir($data_folder, 'questions.json');
my $raw_json_data;
{
  open my $filehandle, '<', $file or die;
  local $/ = undef;
  $raw_json_data = <$filehandle>;
  close $filehandle;
}

my $json_object = new JSON::PP;
my $questions_object =
  $json_object->JSON::PP::decode(Encode::encode('UTF-8', $raw_json_data));

my @questions = @{$questions_object->{'questions'}};

# ROUTE HANDLER:
get '/' => sub {
  my $page_handler = shift;
  $page_handler->reply->static('index.html');
};

get '/get_question' => sub {
  my $page_handler = shift;

  my $question_number = "";
  $question_number = $page_handler->param('number');

  if ($question_number <= scalar @questions) {
    my $index_number = $question_number - 1;

    my %response_hash = (
      "number" => $question_number,
      "question" => Encode::decode('UTF-8', $questions[$index_number]->{"question"}),
      "1" => Encode::decode('UTF-8', $questions[$index_number]->{"variants"}->{"1"}),
      "2" => Encode::decode('UTF-8', $questions[$index_number]->{"variants"}->{"2"}),
      "3" => Encode::decode('UTF-8', $questions[$index_number]->{"variants"}->{"3"}),
      "4" => Encode::decode('UTF-8', $questions[$index_number]->{"variants"}->{"4"}),
    );

    my $response_json = encode_json \%response_hash;
    $page_handler->render(
      text => Encode::decode('UTF-8', $response_json),
      status => 200, format => 'json'
    );
  }

  if ($question_number > scalar @questions) {
    $page_handler->render(
      text => "",
      status => 200, format => 'json'
    );
  }
};

get '/check_answer' => sub {
  my $page_handler = shift;

  my $question_number = "";
  $question_number = $page_handler->param('number');
  my $index_number = $question_number - 1;

  my %response_hash = (
    "answer" => Encode::decode('UTF-8', $questions[$index_number]->{"answer"}),
  );

  my $response_json = encode_json \%response_hash;
  $page_handler->render(
    text => Encode::decode('UTF-8', $response_json),
    status => 200, format => 'json'
  );
};

# SERVER STARTER:
app->start;
